# SPDX-License-Identifier: AGPL-3.0+
#
# Copyright (C) 2018 Ultimaker B.V.
# Copyright (C) 2018 Raymond Siudak <r.siudak@ultimaker.com>
#
# GitLab CI package build is split up into two parts.
# * Build environment: creates the docker image that is needed for package generation
# * Package generation: creates the final artifact
#
# Due to missing feature gitlab-org/gitlab-ce#29447 we check for dockerimage
# changes using the tag 'dockerimage'.

stages:
- lint
- prepare
- push
- build
- test
- cleanup

# Common requisites
# =================
.parameters_common: &parameters_common
  tags:
    - docker

.shell_linting_common: &shell_linting_common
  <<: *parameters_common
  image: registry.hub.docker.com/koalaman/shellcheck-alpine:stable
  stage: lint

lint_test_scripts:
  <<: *shell_linting_common
  script:
    - shellcheck -C -f tty -s sh test/*.sh

lint_system_update_scripts:
  <<: *shell_linting_common
  script:
    - shellcheck -C -f tty -s sh scripts/*.sh

lint_local_build_script:
  <<: *shell_linting_common
  script:
    - shellcheck -C -f tty -s sh build_for_ultimaker.sh

lint_package_build_script:
  <<: *shell_linting_common
  script:
    - shellcheck -C -f tty -s sh build.sh

# Build environment
# The 'prepare' and the 'push' stages are executed conditionally. They both include
# 'environment_common' that makes sure that the stage is only performed when the
# commit message contains the string "dockerimage".
# =================
.build_environment_common: &environment_common
  <<: *parameters_common
  image: registry.hub.docker.com/library/docker:stable
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /dockerimage/i

prepare_build_environment:
  <<: *environment_common
  stage: prepare
  script:
    - docker build --rm -t "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}" .
    - |
        docker run \
        --rm \
        --privileged \
        -e "ARM_EMU_BIN=${ARM_EMU_BIN}" \
        -v "${ARM_EMU_BIN}:${ARM_EMU_BIN}:ro" \
        "$CI_COMMIT_SHA:$CI_PIPELINE_ID" \
        sh -x /test/buildenv.sh

# The push to the Docker registry is thus only executed when the commit message contains
# 'dockerimage' and the working branch is 'master'
push_build_environment:
  <<: *environment_common
  except:
    - /^(?!master$)/
  stage: push
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker tag  "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
    - docker tag  "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" "${CI_REGISTRY_IMAGE}:latest"
    - docker push "${CI_REGISTRY_IMAGE}:latest"

cleanup_build_environment:
  <<: *environment_common
  stage: cleanup
  when: always
  script:
    - |
      if docker inspect --type image "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}" 1> /dev/null; then
        docker rmi "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}"
      fi

# Package generation
# The actual artifact build should always be done with the latest Docker registry image,
# unless the build environment is modified. Gitlab CI syntax is limited and therefore
# multiple build package jobs are defined in order to catch all the scenarios and avoid
# multiple build job execution.
# ==================
.build_pkg_common: &build_pkg_common
  <<: *parameters_common
  stage: build
  script:
  - ./build.sh
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA"
    paths:
    - ./.build_*/um-update*.xz.img
    expire_in: 3 days

.dev_docker_latest: &dev_docker_latest
  except:
    refs:
      - master
    variables:
      - $CI_COMMIT_MESSAGE =~ /dockerimage/i
  image: "${CI_REGISTRY_IMAGE}:latest"

.dev_docker_candidate: &dev_docker_candidate
    except:
      - master
    only:
      variables:
        - $CI_COMMIT_MESSAGE =~ /dockerimage/i
    image: "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}"

.master_docker_latest: &master_docker_latest
  only:
    - master
  image: "${CI_REGISTRY_IMAGE}:latest"

# Build the package on a non-master branch in a modified Docker image.
build:dev_docker_candidate:
  <<: *build_pkg_common
  <<: *dev_docker_candidate

# Build the package on a non-master branch in the latest Docker image.
build:dev_docker_latest:
  <<: *build_pkg_common
  <<: *dev_docker_latest

# Build the package on a the master branch in the latest Docker image.
build:master_docker_latest:
  <<: *build_pkg_common
  <<: *master_docker_latest

# Test package
.test_pkg_common: &test_pkg_common
  stage: test
  dependencies:
    - build:dev_docker_candidate
    - build:dev_docker_latest
    - build:master_docker_latest
  script:
    - ./test/toolbox_image.sh .build_*/um-update*.xz.img

# Test the package on a non-master branch in a modified Docker image.
test:dev_docker_candidate:
 <<: *test_pkg_common
 <<: *dev_docker_candidate

# Test the package on a non-master branch in the latest Docker image.
test:dev_docker_latest:
 <<: *test_pkg_common
 <<: *dev_docker_latest

# Test the package on a the master branch in the latest Docker image.
test:master_docker_latest:
 <<: *test_pkg_common
 <<: *master_docker_latest
